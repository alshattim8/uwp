import java.awt.event.ActionEvent;
/**
The GUI class contains the form and all figures fro the game.
@author John Hunter
@author Andre Fugere
*/
public class GUI extends java.awt.Frame implements 
      java.awt.event.ActionListener
{
   private final int numFigs = 9;
   private PFigure figures[];
   private javax.swing.Timer moveTimer = new javax.swing.Timer(1000, this);
   private final int numBigFigs = 3;
   private int time;
   private int lives;
   private final int survivalTime = 60;
   private final int numLives = 3;
   private final int xSize = 800;
   private final int ySize = 400;
   private final int playerDelta = 10;
   

   
   /**
   The constructor makes a new form of GUI.
   */
   public GUI()
   {
      initComponents();
      setSize(xSize, ySize);
      figures = new PFigure[numFigs];
   }
   
   /**
   The actionPerformed method updates the clock, while checking to see if
   the player collides with an enemy.
   If a collision occurs, it will output a small beeping sound.
   @param ae the event that happens
   */
   @Override
   public void actionPerformed(ActionEvent ae)
   {
      if (time < survivalTime && lives > 0)
      {
         updateTime();
         for (int i = 0; i < numFigs; i++)
            figures[i].hide();
         for (int i = 0; i < numFigs; i++)
            figures[i].move();
         for (int i = 0; i < numFigs; i++)
            figures[i].draw();
         playCollisionSound();
      }
      else
      {
         this.moveTimer.stop();
         for (int i = 0; i < this.numFigs; i++)
            figures[i].hide();
         if (lives > 0)
         {
            this.youWinLabel.setVisible(true);
            playYouWinSound();
         }
         else
         {
            this.gameOverLabel.setVisible(true);
            playGameOverSound();
         }
      }
      
   }
   /**
   This method is called from within the constructor to initialize the form.
   WARNING: Do NOT modify this code. The content of this method is always
   regenerated by the Form Editor.
   */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      gamePanel = new java.awt.Panel();
      livesLabel = new java.awt.Label();
      startButton = new java.awt.Button();
      timeLabel = new java.awt.Label();
      resetButton = new java.awt.Button();
      livesTextField = new java.awt.TextField();
      timeTextField = new java.awt.TextField();
      youWinLabel = new java.awt.Label();
      gameOverLabel = new java.awt.Label();

      setMinimumSize(new java.awt.Dimension(720, 410));
      addWindowListener(new java.awt.event.WindowAdapter()
      {
         public void windowClosing(java.awt.event.WindowEvent evt)
         {
            exitForm(evt);
         }
      });
      setLayout(null);

      gamePanel.setBackground(java.awt.Color.cyan);
      gamePanel.addKeyListener(new java.awt.event.KeyAdapter()
      {
         public void keyPressed(java.awt.event.KeyEvent evt)
         {
            keyPressedHandler(evt);
         }
      });
      add(gamePanel);
      gamePanel.setBounds(10, 10, 700, 320);

      livesLabel.setText("Lives Remaining:");
      add(livesLabel);
      livesLabel.setBounds(570, 370, 100, 20);
      livesLabel.getAccessibleContext().setAccessibleName("Lives Remaining:");

      startButton.setLabel("Start Game");
      startButton.addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mouseClicked(java.awt.event.MouseEvent evt)
         {
            startButtonHandler(evt);
         }
      });
      add(startButton);
      startButton.setBounds(10, 340, 90, 24);

      timeLabel.setText("Current Time:");
      add(timeLabel);
      timeLabel.setBounds(590, 340, 80, 20);

      resetButton.setLabel("Reset Game");
      resetButton.addMouseListener(new java.awt.event.MouseAdapter()
      {
         public void mouseClicked(java.awt.event.MouseEvent evt)
         {
            resetButtonHandler(evt);
         }
      });
      add(resetButton);
      resetButton.setBounds(10, 370, 90, 24);

      livesTextField.setEditable(false);
      add(livesTextField);
      livesTextField.setBounds(670, 370, 40, 20);

      timeTextField.setEditable(false);
      add(timeTextField);
      timeTextField.setBounds(670, 340, 40, 20);

      youWinLabel.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
      youWinLabel.setForeground(new java.awt.Color(0, 255, 0));
      youWinLabel.setText("You Win!");
      youWinLabel.setVisible(false);
      add(youWinLabel);
      youWinLabel.setBounds(100, 330, 110, 30);

      gameOverLabel.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
      gameOverLabel.setForeground(new java.awt.Color(255, 0, 0));
      gameOverLabel.setText("You Lose...");
      gameOverLabel.setVisible(false);
      add(gameOverLabel);
      gameOverLabel.setBounds(100, 360, 130, 30);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   /**
   This method exits the current form.
   @param evt the event that happens
   */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
       System.exit(0);
    }//GEN-LAST:event_exitForm

   /**
   This method handles what happens when the user presses the arrow keys. 
   @param evt the event that happens
   */
   private void keyPressedHandler(java.awt.event.KeyEvent evt)//GEN-FIRST:event_keyPressedHandler
   {//GEN-HEADEREND:event_keyPressedHandler
      figures[0].hide();
      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN)
         figures[0].move(0, playerDelta);
      else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP)
         figures[0].move(0, -playerDelta);
      else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT)
         figures[0].move(-playerDelta, 0);
      else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT)
         figures[0].move(playerDelta, 0);
      figures[0].draw();
   }//GEN-LAST:event_keyPressedHandler

   /**
   This method starts the game when the user presses the Start Game button.
   @param evt the event that happens
   */
   private void startButtonHandler(java.awt.event.MouseEvent evt)//GEN-FIRST:event_startButtonHandler
   {//GEN-HEADEREND:event_startButtonHandler
      gamePanel.requestFocus();
      time = 0;
      lives = numLives;
      figures[0] = new PlayerFigure(gamePanel);
      for (int i = 1; i < numFigs - numBigFigs; i++)
         figures[i] = new SmallFigure(gamePanel);
      for (int i = numFigs - numBigFigs; i < numFigs; i++)
         figures[i] = new BigFigure(gamePanel);
      this.timeTextField.setText("" + time);
      this.livesTextField.setText("" + lives);
      this.startButton.setVisible(false);
      moveTimer.start();
      
   }//GEN-LAST:event_startButtonHandler

   /**
   This method resets the game to its original state when the Reset
   Game button is pressed.
   @param evt the event that happens
   */
   private void resetButtonHandler(java.awt.event.MouseEvent evt)//GEN-FIRST:event_resetButtonHandler
   {//GEN-HEADEREND:event_resetButtonHandler
      this.moveTimer.stop();
      this.youWinLabel.setVisible(false);
      this.gameOverLabel.setVisible(false);
      for (int i = 0; i < numFigs; i++)
      {
         figures[i].hide();
         figures[i] = null;
      }
      this.lives = 0;
      this.time = 0;
      this.timeTextField.setText("" + time);
      this.livesTextField.setText("" + lives);
      this.startButton.setVisible(true);
      
   }//GEN-LAST:event_resetButtonHandler

   /**
   The main method runs the form and starts the GUI.
   @param args is unused
   */
   public static void main(String args[])
   {
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         @Override
         public void run()
         {
            new GUI().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private java.awt.Label gameOverLabel;
   private java.awt.Panel gamePanel;
   private java.awt.Label livesLabel;
   private java.awt.TextField livesTextField;
   private java.awt.Button resetButton;
   private java.awt.Button startButton;
   private java.awt.Label timeLabel;
   private java.awt.TextField timeTextField;
   private java.awt.Label youWinLabel;
   // End of variables declaration//GEN-END:variables

   /**
   This method checks to see if one figure has collided with another.
   @return true if a collision occurred, false if not
   */
   private boolean checkCollisions()
   {
      for (int i = 1; i < numFigs; i++)
         if (figures[0].collidedWith(figures[i]))
            return true;
      return false;
   }

   /**
   This function updates the time by 1 unit.
   */
   private void updateTime()
   {
      time++;
      this.timeTextField.setText("" + time);
   }

   /**
   Method to play a sound and decrement lives when the player collides with 
   an enemy.
   */
   private void playCollisionSound()
   {
      try
      {
         if (checkCollisions())
         {
            lives--;
            this.livesTextField.setText("" + lives);
            java.io.File soundFile = new java.io.File(
                  "C:\\Windows\\Media\\ir_end.wav");
            javax.sound.sampled.AudioInputStream audioIn =
                  javax.sound.sampled.AudioSystem.getAudioInputStream(
                  soundFile);
            javax.sound.sampled.Clip clip =
                  javax.sound.sampled.AudioSystem.getClip();

            clip.open(audioIn);
            clip.start();
         }
      }
      catch (Exception ex)
      {
         System.out.println(ex);
      }
   }

   /**
   Method to play a sound when the player wins the game.
   */
   private void playYouWinSound()
   {
      try
      {
         java.io.File soundFile = new java.io.File(
               "C:\\Windows\\Media\\tada.wav");
         javax.sound.sampled.AudioInputStream audioIn =
               javax.sound.sampled.AudioSystem.getAudioInputStream(
               soundFile);
         javax.sound.sampled.Clip clip =
               javax.sound.sampled.AudioSystem.getClip();

         clip.open(audioIn);
         clip.start();
      }
      catch (Exception ex)
      {
         System.out.println(ex);
      }
   }

   /**
   Method to play a sound when the player loses the game.
   */
   private void playGameOverSound()
   {
      try
      {
         java.io.File soundFile = new java.io.File(
               "C:\\Windows\\Media\\ringout.wav");
         javax.sound.sampled.AudioInputStream audioIn =
               javax.sound.sampled.AudioSystem.getAudioInputStream(
               soundFile);
         javax.sound.sampled.Clip clip =
               javax.sound.sampled.AudioSystem.getClip();

         clip.open(audioIn);
         clip.start();
      }
      catch (Exception ex)
      {
         System.out.println(ex);
      }
   }
}
