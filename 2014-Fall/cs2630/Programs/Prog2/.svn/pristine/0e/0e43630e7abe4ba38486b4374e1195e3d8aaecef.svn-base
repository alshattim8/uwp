#include "Company.h"
#include "LeakWatcher.h"

Company::Company()
{
   name = NULL;
}

Company::Company(const Company & toCopy)
{
   int arraySize = sizeof(toCopy.name);
   name = new char[arraySize];
   for (int i = 0; i < arraySize; i++)
   {
      name[i] = toCopy.name[i];
   }
   for (int i = 0; i < PHONE_LEN; i++)
   {
      phone[i] = toCopy.phone[i];
   }
}

Company::~Company()
{
   delete name;
}

Company & Company::operator=(const Company & rhs)
{
   if (*this != rhs)
   {
      int i = 0;
      while (rhs.name[i] != '0')
         name[i++] = rhs.name[i];
      name[i] = rhs.name[i];
      for (int i = 0; i < PHONE_LEN; i++)
      {
         phone[i] = rhs.phone[i];
      }
   }
   return *this;
   
}

bool  Company::operator<(const Company & toCompare) const
{
   for (int i = 0; name[i] != '0' && toCompare.name[i] != '0'; i++)
   {
      if (name[i] < toCompare.name[i])
         return true;
      else if (name[i] > toCompare.name[i])
      {
         return false;
      }
   }
   return false;
}

bool  Company::operator==(const Company & toCompare) const
{
   for (int i = 0; i < MAX_NAME_LEN; i++)
   {
      if (name[i] != '0' && toCompare.name[i] != '0' )
      {
         if (name[i] != toCompare.name[i])
            return false;
      }
      else if (name[i] == '0' && toCompare.name[i] == '0')
      {
         return true;
      }
      else
         return false;
   }
   return false;
   
}

bool  Company::operator!=(const Company & toCompare) const
{
   return !(operator==(toCompare));
}

ostream& operator<<(ostream& out, const Company & toOut)
{
   int count = 0;
   for (int i = 0; toOut.name[i] != '0'; i++)
   {
      out << toOut.name[i];
      count++;
   }
   out << setiosflags(ios::left) << setw(toOut.MAX_NAME_LEN - count + 1);
   out << ' ';
   for (int i = 0; i < toOut.PHONE_LEN; i++)
   {
      out << toOut.phone[i];
   }
   return out;
}

istream& operator>>(istream& in, Company & toIn) //ask zack
{
   const int maxSize = toIn.MAX_NAME_LEN;
   int bufferSize = 0; 
   char * buffer = new char[maxSize];
   bool loop = true;
   in >> *buffer;
   in.putback(*buffer);
   for (int i = 0; i < maxSize && loop == true; i++)
   {
      bufferSize++;
      char got;
      in.get(got);
      buffer[i] = got;
      if (buffer[i] == ' ')
      {
         buffer[i] = '0';
         loop = false;
      }
   }
   delete toIn.name;
   toIn.name = new char[bufferSize];
   for (int i = 0; i < bufferSize; i++)
   {
      toIn.name[i] = buffer[i];
   }
   delete buffer;

   for (int i = 0; i < toIn.PHONE_LEN; i++)
   {
      in >> toIn.phone[i];
   }
   in.ignore(256, '\n');
   return in;
}

#ifdef TESTING_COMPANY

void main ()
{
   Company test1, test2;
   cout << "enter a company: " << endl;
   cin >> test1;
   cout << test1 << endl;
   cout << "enter a company that is ahead of the previous company alphabetically: " << endl;
   cin >> test2;
   cout << test2 << endl;
   cout << "testing comp1 < comp2: expecting (0)" << (test1 < test2) << endl;
   cout << "testing comp2 < comp1: expecting (1)" << (test2 < test1) << endl;
   cout << "testing comp2 == comp1: expecting (0)" << (test2 == test1) << endl;
   cout << "testing comp2 != comp1: expecting (1)" << (test2 != test1) << endl;
   cout << "set test1 to = test2" << endl;
   test1 = test2;
   cout << test1 << endl;
   cout << test2 << endl;
   cout << "testing comp1 < comp2: expecting (0)" << (test1 < test2) << endl;
   cout << "testing comp2 < comp1: expecting (0)" << (test2 < test1) << endl;
   cout << "testing comp2 == comp1: expecting (1)" << (test2 == test1) << endl;
   cout << "testing comp2 != comp1: expecting (0)" << (test2 != test1) << endl;
}

#endif