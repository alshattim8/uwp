#include "LList.h"

LList::~LList()
{
   if (list != NULL)
   {
      Node * p = list->next;
      while (p != NULL)
      {
         delete list->infoPtr;
         delete list;
         list = p;
         p = p->next;
      }
      delete list;
   }
}

bool LList::IsEmpty() const
{
   return list == NULL;
}

bool LList::Insert(InfoType *x_ptr)
{
   if (list == NULL || *x_ptr < *list->infoPtr)
   {
      list = new Node(x_ptr, list);
      return true;
   }
   else
   {
      Node * p = list;
      while (p->next != NULL || *x_ptr < *p->next->infoPtr || *x_ptr != *p->next->infoPtr)
      {
         p = p->next;
      }
      if (*x_ptr == *p->next->infoPtr)
      {
         return false;
      }
      else
      {
         p->next = new Node(x_ptr, p->next);
         return true;
      }
   }
}

bool LList::Delete(const InfoType & x)
{
   Node * p = list;
   if (p == NULL)
   {
      return false;
   }
   else if (*p->infoPtr == x)
   {
      list = list->next;
      delete p->infoPtr;
      delete p;
      return true;
   }
   else
   {
      while (p->next != NULL || )
   }
}

void LList::Display(ostream & out_stream) const
{

}