#include "Company.h"
#include "LeakWatcher.h"

Company::Company()
{
   name = NULL;
}

Company::Company(const Company & toCopy)
{
   int nameCount = 0;
   while (toCopy.name[nameCount] != '0')
   {
      nameCount++;
   }
   name = new char[nameCount + 1];
   for (int i = 0; i < nameCount + 1; i++)
   {
      name[i] = toCopy.name[i];
   }
   for (int i = 0; i < PHONE_LEN; i++)
   {
      phone[i] = toCopy.phone[i];
   }
}

Company::~Company()
{
   delete name;
}

Company & Company::operator=(const Company & rhs)
{
   if (this != &rhs)
   {
      delete name;
      int nameCount = 0;
      while (rhs.name[nameCount] != '0')
      {
         nameCount++;
      }
      name = new char[nameCount + 1];
      for (int i = 0; i < nameCount + 1; i++)
      {
         name[i] = rhs.name[i];
      }
      name[nameCount] = '0';
      for (int i = 0; i < PHONE_LEN; i++)
      {
         phone[i] = rhs.phone[i];
      }
   }
   return *this;
   
}

bool  Company::operator<(const Company & toCompare) const
{
   return strcmp(name, toCompare.name) < 0;
}

bool  Company::operator==(const Company & toCompare) const
{
   return strcmp(name, toCompare.name) == 0;
}

bool  Company::operator!=(const Company & toCompare) const
{
   return strcmp(name, toCompare.name) != 0;
}

ostream& operator<<(ostream& out, const Company & toOut)
{
   out << setiosflags(ios::left) << setw(toOut.MAX_NAME_LEN) << toOut.name << " " << toOut.phone;
   
   /*for (int i = 0; toOut.name[i] != '0'; i++)
   {
      out << toOut.name[i];
   }
   out << " ";
   for (int i = 0; i < toOut.PHONE_LEN; i++)
   {
      out << toOut.phone[i];
   }*/
   return out;
}

istream& operator>>(istream& in, Company & toIn)
{
   toIn.name = new char[30];
   in >> toIn.name >> toIn.phone;
   /*
   char buffer[30];
   char temp;
   int buffSize = 0;
   in >> temp;
   for (int i = 0; temp != ' ' && buffSize < 30; i++)
   {
      buffer[i] = temp;
      buffSize++;
      in >> temp;
   }
   toIn.name = new char[buffSize + 1];
   for (int i = 0; i < buffSize; i++)
   {
      toIn.name[i] = buffer[i];
   }
   toIn.name[buffSize] = '0';
   for (int i = 0; i < toIn.PHONE_LEN; i++)
   {
      in >> toIn.phone[i];
   }
   */
   return in;
   
}