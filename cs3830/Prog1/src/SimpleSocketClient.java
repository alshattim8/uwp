/**
Program 1: A simple socket Client
CS3830, Data Communications and Computer Networks
A simple program to connect, using sockets, to a server.
@author John W Hunter
*/
import java.io.*;
import static java.lang.Integer.parseInt;
import java.net.*;

public class SimpleSocketClient extends javax.swing.JFrame
{
   final int DEFAULT_WIDTH = 400;
   final int DEFAULT_HEIGHT = 500;
   
   Socket sock = null;
   PrintWriter writeSock;
   BufferedReader readSock;

   /**
   Creates new form SimpleSocketClient
   */
   public SimpleSocketClient()
   {
      initComponents();
      this.setSize(this.DEFAULT_WIDTH, this.DEFAULT_HEIGHT);
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      ipLabel = new javax.swing.JLabel();
      ipField = new javax.swing.JTextField();
      socketLabel = new javax.swing.JLabel();
      socketField = new javax.swing.JTextField();
      connectionLabel = new javax.swing.JLabel();
      messagesLabel = new javax.swing.JLabel();
      sendField = new javax.swing.JTextField();
      sendLabel = new javax.swing.JLabel();
      sendButton = new javax.swing.JButton();
      outputLabel = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      outputTextArea = new javax.swing.JTextArea();
      connectionButton = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Program 1 Client");

      ipLabel.setText("IP Address:");

      ipField.setText("localhost");

      socketLabel.setText("Port Number:");

      socketField.setText("5976");

      connectionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      connectionLabel.setText("Connection");

      messagesLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
      messagesLabel.setText("Messages");

      sendLabel.setText("Send to Server:");

      sendButton.setText("Send");
      sendButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            sendButtonActionPerformed(evt);
         }
      });

      outputLabel.setText("Output Messages:");

      outputTextArea.setEditable(false);
      outputTextArea.setColumns(20);
      outputTextArea.setRows(5);
      jScrollPane1.setViewportView(outputTextArea);

      connectionButton.setText("Connect");
      connectionButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            connectionButtonActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(20, 20, 20)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                     .addComponent(outputLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(20, 20, 20)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(socketLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(ipLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(18, 18, 18)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(ipField)
                     .addComponent(socketField)))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(connectionLabel)
                     .addComponent(messagesLabel)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(sendField)
                           .addComponent(sendLabel)))))
               .addGroup(layout.createSequentialGroup()
                  .addGap(20, 20, 20)
                  .addComponent(connectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(connectionLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(ipLabel)
               .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(socketLabel)
               .addComponent(socketField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(connectionButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(messagesLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sendLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sendField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sendButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(outputLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   /**
   Handler for when the connectionButton is pressed. If pressed while 
   disconnected, will connect to the server. If connected to server, will 
   disconnect from server.
   @param evt event (mouse click)
   */
   private void connectionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectionButtonActionPerformed
   {//GEN-HEADEREND:event_connectionButtonActionPerformed
      if (sock == null)
      {
         this.connectToServer();
      }
      else
      {
         this.disconnetFromServer();
      }
   }//GEN-LAST:event_connectionButtonActionPerformed

   /**
   Handler for the sendButton. If the client is connected to a server, will
   send message from the sendField. Will print the appropriate error message 
   otherwise.
   @param evt event (mouse click)
   */
   private void sendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendButtonActionPerformed
   {//GEN-HEADEREND:event_sendButtonActionPerformed
      if (sock != null && sock.isConnected())
      {
         try
         {
            String someTextToWrite = this.sendField.getText();
            this.sendField.setText("");
            writeSock.println(someTextToWrite);
            this.outputTextArea.append("Client: " + someTextToWrite + "\n");
            String dataRead = readSock.readLine();
            this.outputTextArea.append(dataRead + "\n");
            if (someTextToWrite.equals("quit"))
            {
               this.disconnetFromServer();
            }
         }
         catch (IOException ex)
         {
            this.outputTextArea.append("Error: " + ex + "\n");
         }
      }
      else if (sock == null)
      {
         this.outputTextArea.append("Please connect to a server to send "
               + "messages\n");
      }
      else if (!sock.isConnected())
      {
         this.outputTextArea.append("Please make sure you are properly "
               + "connected to a server to send messages\n");
         this.disconnetFromServer();
      }
   }//GEN-LAST:event_sendButtonActionPerformed

   /**
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(SimpleSocketClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(SimpleSocketClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(SimpleSocketClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(SimpleSocketClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new SimpleSocketClient().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton connectionButton;
   private javax.swing.JLabel connectionLabel;
   private javax.swing.JTextField ipField;
   private javax.swing.JLabel ipLabel;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JLabel messagesLabel;
   private javax.swing.JLabel outputLabel;
   private javax.swing.JTextArea outputTextArea;
   private javax.swing.JButton sendButton;
   private javax.swing.JTextField sendField;
   private javax.swing.JLabel sendLabel;
   private javax.swing.JTextField socketField;
   private javax.swing.JLabel socketLabel;
   // End of variables declaration//GEN-END:variables

   /**
   Method to connect to the server. If the socket number is not a number, 
   there is an issue with the read or write stream, or the socket fails to 
   connect to the server, an error message is printed.
   */
   private void connectToServer()
   {
      try
      {
         int portNum = parseInt(this.socketField.getText());
         String hostAddress = this.ipField.getText();
         sock = new Socket(hostAddress, portNum);
         if (sock.isConnected())
         {
            writeSock = new PrintWriter(sock.getOutputStream(), true);
            readSock = new BufferedReader(new InputStreamReader(
                  sock.getInputStream()));
            this.outputTextArea.append("Connected to " + hostAddress + ":"
                  + portNum + "\n");
            this.connectionButton.setText("Disconnect");
         }
         else
         {
            sock = null;
            this.outputTextArea.append("Error connecting to server: " 
                  + hostAddress + ":" + portNum + "\n");
         }
      }
      catch (IOException ex)
      {
         this.outputTextArea.append("Error: " + ex + "\n" + "IOException, "
               + "please check your URL address and socket!\n");
         sock = null;
      }
      catch (NumberFormatException ex)
      {
         this.outputTextArea.append("Error: " + ex + "\n" + "Please make sure"
               + " the socket number is a number!\n");
         sock = null;
      }
   }

   /**
   Method to disconnect from the server. If there is an issue with the read 
   or write stream, an error message will be printed.
   */
   private void disconnetFromServer()
   {
      try
      {
         readSock.close();
         writeSock.close();
         sock.close();
         sock = null;
         this.connectionButton.setText("Connect");
         this.outputTextArea.append("Connection terminated\n");
      }
      catch (IOException ex)
      {
         this.outputTextArea.append("Error: " + ex + "\n" + "IOException!\n");
      }
   }
}
